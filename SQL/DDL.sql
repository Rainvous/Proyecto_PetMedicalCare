-- ===============================================
-- Script portable por esquema (MySQL/InnoDB)
-- USO: reemplaza la l√≠nea USE por el esquema deseado
--      y ejecuta el script completo.
-- ===============================================

-- ===============================================
-- DDL con TODAS las PK AUTO_INCREMENT
-- ===============================================

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

USE `petmedicalcare`;

-- -----------------------------------------------------
-- ROLES
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ROLES` (
  `ROL_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`ROL_ID`)
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- USUARIOS
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `USUARIOS` (
  `USUARIO_ID` INT NOT NULL AUTO_INCREMENT,
  `USENAME` VARCHAR(100) NULL,              -- (posible typo: USERNAME)
  `PASSWORD` VARCHAR(100) NULL,
  `CORREO` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  `FECHA_MODIFICACION` DATETIME NULL,
  `USUARIO_MOFICADOR` VARCHAR(45) NULL,     -- (posible typo)
  `USUARIO_CREADOR` VARCHAR(45) NULL,
  `FECHA_CREACION` DATETIME NULL,
  PRIMARY KEY (`USUARIO_ID`)
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- PERSONAS (FK a USUARIOS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PERSONAS` (
  `PERSONA_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `DIRECCION` VARCHAR(100) NULL,
  `TELEFONO` VARCHAR(100) NULL,
  `SEXO` VARCHAR(1) NULL COMMENT '\'S\',\'M\',O\'\n',
  `ACTIVO` TINYINT NULL,
  `TIPO_DOCUMENTO` VARCHAR(45) NULL,
  `NRO_DOCUMENTO` INT NULL,
  `RUC` INT NULL,
  `USUARIO_ID` INT NOT NULL,
  PRIMARY KEY (`PERSONA_ID`),
  INDEX `fk_PERSONAS_USUARIOS1_idx` (`USUARIO_ID` ASC),
  CONSTRAINT `fk_PERSONAS_USUARIOS1`
    FOREIGN KEY (`USUARIO_ID`) REFERENCES `USUARIOS` (`USUARIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- TIPOS_SERVICIO
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TIPOS_SERVICIO` (
  `TIPO_SERVICIO_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `DESCRIPCION` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`TIPO_SERVICIO_ID`)
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- TIPOS_PRODUCTO
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TIPOS_PRODUCTO` (
  `TIPO_PRODUCTO_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `DESCRIPCION` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`TIPO_PRODUCTO_ID`)
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- TIPOS_DOCUMENTO
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TIPOS_DOCUMENTO` (
  `TIPO_DOCUMENTO_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`TIPO_DOCUMENTO_ID`)
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- MASCOTAS (FK a PERSONAS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MASCOTAS` (
  `MASCOTA_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `ESPECIE` VARCHAR(100) NULL,
  `SEXO` VARCHAR(1) NULL,
  `RAZA` VARCHAR(45) NULL,
  `COLOR` VARCHAR(45) NULL,
  `ACTIVO` TINYINT NULL,
  `FECHA_DEFUNCION` DATETIME NULL,
  `PERSONA_ID` INT NOT NULL,
  PRIMARY KEY (`MASCOTA_ID`),
  INDEX `fk_MASCOTAS_PERSONAS1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_MASCOTAS_PERSONAS1`
    FOREIGN KEY (`PERSONA_ID`) REFERENCES `PERSONAS` (`PERSONA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- VETERINARIOS (FK a PERSONAS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `VETERINARIOS` (
  `VETERINARIO_ID` INT NOT NULL AUTO_INCREMENT,
  `ESPECIALIZACION` VARCHAR(100) NULL,
  `FECHA_DE_CONTRATACION` DATE NULL,
  `ESTADO` VARCHAR(45) NULL,
  `ACTIVO` TINYINT NULL,
  `PERSONA_ID` INT NOT NULL,
  PRIMARY KEY (`VETERINARIO_ID`),
  INDEX `fk_VETERINARIOS_PERSONAS1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_VETERINARIOS_PERSONAS1`
    FOREIGN KEY (`PERSONA_ID`) REFERENCES `PERSONAS` (`PERSONA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- SERVICIOS (FK a TIPOS_SERVICIO)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SERVICIOS` (
  `SERVICIO_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `COSTO` DOUBLE NULL,
  `ESTADO` VARCHAR(45) NULL,
  `DESCRIPCION` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  `FECHA_MODIFICACION` DATETIME NULL,
  `USUARIO_MOFICADOR` VARCHAR(45) NULL,     -- (posible typo)
  `USUARIO_CREADOR` VARCHAR(45) NULL,
  `FECHA_CREACION` DATETIME NULL,
  `TIPO_SERVICIO_ID` INT NOT NULL,
  PRIMARY KEY (`SERVICIO_ID`),
  INDEX `fk_SERVICIOS_TIPOS_SERVICIO1_idx` (`TIPO_SERVICIO_ID` ASC),
  CONSTRAINT `fk_SERVICIOS_TIPOS_SERVICIO1`
    FOREIGN KEY (`TIPO_SERVICIO_ID`) REFERENCES `TIPOS_SERVICIO` (`TIPO_SERVICIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- PRODUCTOS (FK a TIPOS_PRODUCTO)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PRODUCTOS` (
  `PRODUCTO_ID` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(100) NULL,
  `PRESENTACION` VARCHAR(100) NULL,
  `PRECIO_UNITARIO` DOUBLE NULL,
  `ACTIVO` TINYINT NULL,
  `TIPO_PRODUCTO_ID` INT NOT NULL,
  `FECHA_MODIFICACION` DATE NULL,
  `USUARIO_MOFICADOR` VARCHAR(45) NULL,     -- (posible typo)
  `USUARIO_CREADOR` VARCHAR(45) NULL,
  `FECHA_CREACION` DATE NULL,
  PRIMARY KEY (`PRODUCTO_ID`),
  INDEX `fk_PRODUCTOS_TIPOS_PRODUCTO1_idx` (`TIPO_PRODUCTO_ID` ASC),
  CONSTRAINT `fk_PRODUCTOS_TIPOS_PRODUCTO1`
    FOREIGN KEY (`TIPO_PRODUCTO_ID`) REFERENCES `TIPOS_PRODUCTO` (`TIPO_PRODUCTO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- CITAS_ATENCION (FK a VETERINARIOS, MASCOTAS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `CITAS_ATENCION` (
  `CITA_ID` INT NOT NULL AUTO_INCREMENT,
  `OBSERVACION` VARCHAR(100) NULL,
  `FECHA_HORA_INICIO` DATETIME NULL,
  `FECHA_REGISTRO` DATE NULL,
  `FECHA_HORA_FIN` DATETIME NULL,
  `MONTO` DOUBLE NULL,
  `ACTIVO` TINYINT NULL,
  `PESO_MASCOTA` DOUBLE NULL,
  `VETERINARIO_ID` INT NOT NULL,
  `MASCOTA_ID` INT NOT NULL,
  PRIMARY KEY (`CITA_ID`),
  INDEX `fk_CITAS_ATENCION_VETERINARIOS1_idx` (`VETERINARIO_ID` ASC),
  INDEX `fk_CITAS_ATENCION_MASCOTAS1_idx` (`MASCOTA_ID` ASC),
  CONSTRAINT `fk_CITAS_ATENCION_VETERINARIOS1`
    FOREIGN KEY (`VETERINARIO_ID`) REFERENCES `VETERINARIOS` (`VETERINARIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_CITAS_ATENCION_MASCOTAS1`
    FOREIGN KEY (`MASCOTA_ID`) REFERENCES `MASCOTAS` (`MASCOTA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- RECETAS_MEDICA (FK a CITAS_ATENCION)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RECETAS_MEDICA` (
  `RECETAS_MEDICA_ID` INT NOT NULL AUTO_INCREMENT,
  `DIAGNOSTICO` VARCHAR(100) NULL,
  `ACTIVO` TINYINT NULL,
  `CITA_ID` INT NOT NULL,
  PRIMARY KEY (`RECETAS_MEDICA_ID`),
  INDEX `fk_RECETAS_MEDICA_CITAS_ATENCION1_idx` (`CITA_ID` ASC),
  CONSTRAINT `fk_RECETAS_MEDICA_CITAS_ATENCION1`
    FOREIGN KEY (`CITA_ID`) REFERENCES `CITAS_ATENCION` (`CITA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- ROLES_USUARIO (FK a ROLES y USUARIOS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ROLES_USUARIO` (
  `ROL_USUARIO_ID` INT NOT NULL AUTO_INCREMENT,
  `ROL_ID` INT NOT NULL,
  `USUARIO_ID` INT NOT NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`ROL_USUARIO_ID`),
  INDEX `fk_ROLES_USUARIO_ROLES_idx` (`ROL_ID` ASC),
  INDEX `fk_ROLES_USUARIO_USUARIOS1_idx` (`USUARIO_ID` ASC),
  CONSTRAINT `fk_ROLES_USUARIO_ROLES`
    FOREIGN KEY (`ROL_ID`) REFERENCES `ROLES` (`ROL_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_ROLES_USUARIO_USUARIOS1`
    FOREIGN KEY (`USUARIO_ID`) REFERENCES `USUARIOS` (`USUARIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- DETALLES_SERVICIO (FK a SERVICIOS y CITAS_ATENCION)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DETALLES_SERVICIO` (
  `DETALLE_SERVICIO_ID` INT NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` VARCHAR(100) NULL,
  `COSTO` DOUBLE NULL,
  `ACTIVO` TINYINT NULL,
  `SERVICIO_ID` INT NOT NULL,
  `CITA_ID` INT NOT NULL,
  PRIMARY KEY (`DETALLE_SERVICIO_ID`),
  INDEX `fk_DETALLES_SERVICIO_SERVICIOS1_idx` (`SERVICIO_ID` ASC),
  INDEX `fk_DETALLES_SERVICIO_CITAS_ATENCION1_idx` (`CITA_ID` ASC),
  CONSTRAINT `fk_DETALLES_SERVICIO_SERVICIOS1`
    FOREIGN KEY (`SERVICIO_ID`) REFERENCES `SERVICIOS` (`SERVICIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_DETALLES_SERVICIO_CITAS_ATENCION1`
    FOREIGN KEY (`CITA_ID`) REFERENCES `CITAS_ATENCION` (`CITA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- DOCUMENTOS_DE_PAGO (FK a TIPOS_DOCUMENTO y PERSONAS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DOCUMENTOS_DE_PAGO` (
  `DOCUMENTO_DE_PAGO_ID` INT NOT NULL AUTO_INCREMENT,
  `SERIE` VARCHAR(45) NULL,
  `NUMERO` VARCHAR(45) NULL,
  `TASA_IGV` DOUBLE NULL,
  `FECHA_EMISION` DATE NULL,
  `METODO_DE_PAGO` VARCHAR(45) NULL,
  `ESTADO` VARCHAR(100) NULL,
  `SUBTOTAL_SIN_IGV` DOUBLE NULL,
  `IGV_TOTAL` DOUBLE NULL,
  `TOTAL` DOUBLE NULL,
  `ACTIVO` TINYINT NULL,
  `TIPO_DOCUMENTO_ID` INT NOT NULL,
  `PERSONA_ID` INT NOT NULL,
  PRIMARY KEY (`DOCUMENTO_DE_PAGO_ID`),
  INDEX `fk_DOCUMENTO_DE_PAGO_TIPOS_DOCUMENTO1_idx` (`TIPO_DOCUMENTO_ID` ASC),
  INDEX `fk_DOCUMENTO_DE_PAGO_PERSONAS1_idx` (`PERSONA_ID` ASC),
  CONSTRAINT `fk_DOCUMENTO_DE_PAGO_TIPOS_DOCUMENTO1`
    FOREIGN KEY (`TIPO_DOCUMENTO_ID`) REFERENCES `TIPOS_DOCUMENTO` (`TIPO_DOCUMENTO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_DOCUMENTO_DE_PAGO_PERSONAS1`
    FOREIGN KEY (`PERSONA_ID`) REFERENCES `PERSONAS` (`PERSONA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- DETALLES_RECETA (FK a RECETAS_MEDICA)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DETALLES_RECETA` (
  `DETALLE_RECETA_ID` INT NOT NULL AUTO_INCREMENT,
  `CANTIDAD` INT NULL,
  `DESCRIPCION_MEDICAMENTO` VARCHAR(100) NULL COMMENT 'DETALLE DEL MEDICAMENTO QUE SE USAR√Å\n',
  `INDICACION` VARCHAR(100) NULL COMMENT 'EL MEDICO PONE LAS INDICACIONES QUE DEBE SEGUIR PARA TOMAR EL MEDICAMENTO\n',
  `RECETA_MEDICA_ID` INT NOT NULL,
  `ACTIVO` TINYINT NULL,
  PRIMARY KEY (`DETALLE_RECETA_ID`),
  INDEX `fk_DETALLES_RECETA_RECETAS_MEDICA1_idx` (`RECETA_MEDICA_ID` ASC),
  CONSTRAINT `fk_DETALLES_RECETA_RECETAS_MEDICA1`
    FOREIGN KEY (`RECETA_MEDICA_ID`) REFERENCES `RECETAS_MEDICA` (`RECETAS_MEDICA_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- -----------------------------------------------------
-- DETALLES_DOCUMENTO_DE_PAGO (FK a DOCUMENTOS_DE_PAGO, SERVICIOS, PRODUCTOS)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DETALLES_DOCUMENTO_DE_PAGO` (
  `DDDP_ID` INT NOT NULL AUTO_INCREMENT,
  `NRO_ITEM` INT NULL,
  `DESCRIPCION` VARCHAR(100) NULL,
  `CANTIDAD` INT NULL,
  `PRECIO_UNITARIO_SIN_IGV` DOUBLE NULL,
  `VALOR_VENTA` DOUBLE NULL,
  `IGV_ITEM` DOUBLE NULL,
  `IMPORTE_TOTAL` DOUBLE NULL,
  `DOCUMENTO_DE_PAGO_ID` INT NOT NULL,
  `SERVICIO_ID` INT NULL,
  `PRODUCTO_ID` INT NULL,
  PRIMARY KEY (`DDDP_ID`),
  INDEX `fk_DETALLE_DOCUMENTO_DE_PAGO_DOCUMENTO_DE_PAGO1_idx` (`DOCUMENTO_DE_PAGO_ID` ASC),
  INDEX `fk_DETALLE_DOCUMENTO_DE_PAGO_SERVICIOS1_idx` (`SERVICIO_ID` ASC),
  INDEX `fk_DETALLE_DOCUMENTO_DE_PAGO_PRODUCTOS1_idx` (`PRODUCTO_ID` ASC),
  CONSTRAINT `fk_DETALLE_DOCUMENTO_DE_PAGO_DOCUMENTO_DE_PAGO1`
    FOREIGN KEY (`DOCUMENTO_DE_PAGO_ID`) REFERENCES `DOCUMENTOS_DE_PAGO` (`DOCUMENTO_DE_PAGO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_DETALLE_DOCUMENTO_DE_PAGO_SERVICIOS1`
    FOREIGN KEY (`SERVICIO_ID`) REFERENCES `SERVICIOS` (`SERVICIO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_DETALLE_DOCUMENTO_DE_PAGO_PRODUCTOS1`
    FOREIGN KEY (`PRODUCTO_ID`) REFERENCES `PRODUCTOS` (`PRODUCTO_ID`)
    ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

-- Restaurar settings
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- Restaurar settings
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- ALTER TABLE PARA QUE LAS AUDITORIAS SEAN DATETIME


-- USUARIOS (ya est√°n en DATETIME en tu DDL; esto es idempotente)
ALTER TABLE `USUARIOS`
  MODIFY COLUMN `FECHA_CREACION`     DATETIME NULL,
  MODIFY COLUMN `FECHA_MODIFICACION` DATETIME NULL;

-- SERVICIOS (ya est√°n en DATETIME; idempotente)
ALTER TABLE `SERVICIOS`
  MODIFY COLUMN `FECHA_CREACION`     DATETIME NULL,
  MODIFY COLUMN `FECHA_MODIFICACION` DATETIME NULL;

-- PRODUCTOS (en tu DDL est√°n en DATE: aqu√≠ s√≠ cambia el tipo)
ALTER TABLE `PRODUCTOS`
  MODIFY COLUMN `FECHA_CREACION`     DATETIME NULL,
  MODIFY COLUMN `FECHA_MODIFICACION` DATETIME NULL;
  -- PARA PONER A TODOS AUTOINCREMENT
  -- PERSONAS
ALTER TABLE USUARIOS 
CHANGE COLUMN USENAME USERNAME VARCHAR(255);


